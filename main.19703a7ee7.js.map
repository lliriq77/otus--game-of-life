{"version":3,"file":"main.19703a7ee7.js","mappings":"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","sources":["webpack://otus--game-of-life/./src/utils/drawField.ts","webpack://otus--game-of-life/./src/utils/getNumberOfAliveAround.ts","webpack://otus--game-of-life/./src/utils/getNextGeneration.ts","webpack://otus--game-of-life/./src/utils/getNextCellState.ts","webpack://otus--game-of-life/./src/createGameOfLife.ts","webpack://otus--game-of-life/./src/index.ts"],"sourcesContent":["export function drawField(\n  el: HTMLElement,\n  field: number[][],\n  onCellClick: (a: number, b: number, c: boolean) => void\n) {\n  el.innerHTML = \"\";\n\n  const table: HTMLTableElement = document.createElement(\"table\");\n\n  field.forEach((row, y) => {\n    const tr: HTMLTableRowElement = document.createElement(\"tr\");\n\n    row.forEach((cell, x) => {\n      const td: HTMLTableCellElement = document.createElement(\"td\");\n\n      td.classList.add(\"cell\");\n      td.classList.add(cell === 0 ? \"cell--dead\" : \"cell--alive\");\n      td.dataset.x = `${x}`;\n      td.dataset.y = `${y}`;\n      tr.append(td);\n    });\n    table.append(tr);\n  });\n\n  table.addEventListener(\"click\", (evt) => {\n    const element = <HTMLElement>evt.target;\n\n    if (element.classList.contains(\"cell\")) {\n      const isAlive: boolean = element.classList.contains(\"cell--alive\");\n\n      onCellClick(\n        Number(element.dataset.x),\n        Number(element.dataset.y),\n        isAlive\n      );\n    }\n  });\n  el.append(table);\n}\n","export function getNumberOfAliveAround(\n  field: number[][],\n  x: number,\n  y: number\n) {\n  /**\n   * x - 1, y - 1\n   * x , y - 1\n   * x + 1, y - 1\n   * x - 1, y\n   * x + 1, y\n   * x - 1, y + 1\n   * x, y + 1\n   * x + 1, y + 1\n   */\n  let num = 0;\n  if (y - 1 >= 0 && y - 1 < field.length) {\n    num += field[y - 1][x - 1] || 0;\n    num += field[y - 1][x] || 0;\n    num += field[y - 1][x + 1] || 0;\n  }\n  if (y >= 0 && y < field.length) {\n    num += field[y][x - 1] || 0;\n    num += field[y][x + 1] || 0;\n  }\n  if (y + 1 >= 0 && y + 1 < field.length) {\n    num += field[y + 1][x - 1] || 0;\n    num += field[y + 1][x] || 0;\n    num += field[y + 1][x + 1] || 0;\n  }\n  return num;\n}\n","import { getNumberOfAliveAround } from \"./getNumberOfAliveAround\";\nimport { getNextCellState } from \"./getNextCellState\";\n\nexport function getNextGeneration(field: number[][]) {\n  const result: number[][] = field.slice(0);\n  for (let y = 0; y < field.length; y += 1) {\n    // result[y] === field[y]\n    result[y] = result[y].slice(0);\n\n    for (let x = 0; x < field[y].length; x += 1) {\n      const num: number = getNumberOfAliveAround(field, x, y);\n      const state: boolean = field[y][x] !== 0;\n      const nextState: boolean = getNextCellState(state, num);\n      result[y][x] = nextState ? 1 : 0;\n    }\n  }\n  return result;\n}\n","export function getNextCellState(state: boolean, neighbors: number): boolean {\n  if (state === false && neighbors === 3) {\n    return true;\n  }\n  // if (state === true && (neighbors === 2 || neighbors === 3)) {\n  //   return true;\n  // }\n  // return false;\n  return state === true && (neighbors === 2 || neighbors === 3);\n}\n","import { drawField } from \"./utils/drawField\";\nimport { getNextGeneration } from \"./utils/getNextGeneration\";\n\nconst WIDTH = 20;\nconst HEIGHT = 20;\nconst GAME_STEP_DELAY_IN_MS = 1000;\n\nexport function createGameOfLife(\n  el: HTMLElement,\n  step = GAME_STEP_DELAY_IN_MS\n): void {\n  let field = Array.from({ length: HEIGHT }).map(\n    () => Array.from({ length: WIDTH }).fill(0) as number[]\n  );\n\n  const fieldEl: HTMLDivElement = document.createElement(\"div\");\n  fieldEl.classList.add(\"field\");\n  el.append(fieldEl);\n\n  const buttonEl: HTMLButtonElement = document.createElement(\"button\");\n  buttonEl.innerHTML = \"Start\";\n  el.append(buttonEl);\n\n  let intervalId: any;\n  buttonEl.addEventListener(\"click\", () => {\n    if (buttonEl.innerHTML === \"Start\") {\n      buttonEl.innerHTML = \"Stop\";\n      intervalId = setInterval(makeGameStep, step);\n    } else {\n      buttonEl.innerHTML = \"Start\";\n      clearInterval(intervalId);\n    }\n  });\n\n  function makeGameStep(): void {\n    field = getNextGeneration(field);\n    drawField(fieldEl, field, onCellClick);\n  }\n\n  const onCellClick: (a: number, b: number) => void = (x, y) => {\n    field[y][x] = field[y][x] ? 0 : 1;\n    drawField(fieldEl, field, onCellClick);\n  };\n\n  drawField(fieldEl, field, onCellClick);\n}\n","import \"./styles.css\";\nimport { createGameOfLife } from \"./createGameOfLife\";\n\ncreateGameOfLife(document.querySelector(\"#app\") as HTMLElement);\n// - правила с логикой\n// - интерфейс\n// - интерфейс поля\n// - обработчики событий (менять состояние клетки при нажатии)\n// - автоматический пересчет состояний\n// /**\n//  *    0 1 0 0 1 0 1\n//  *    0 1 0 0 1 0 0\n//  *    0 1 0 0 1 1 1\n//  */\n\n//  // y - 0, 1, 2\n//  // x - 0-6\n//  // (x, y)\n//  // (1, 2) -> 1\n//  // (5, 1) -> 0\n//  // (5, 2) -> 1\n//  // (6, 0) -> 1\n// const field = [\n//   [0, 1, 0, 0, 1, 0, 1],\n//   [0, 1, 0, 0, 1, 0, 0],\n//   [0, 1, 0, 0, 1, 1, 1]\n// ];\n\n// const x = 4;\n// const y = 1;\n// field[y][x]\n"],"names":["drawField","el","field","onCellClick","innerHTML","table","document","createElement","forEach","row","y","tr","cell","x","td","classList","add","dataset","append","addEventListener","evt","element","target","contains","isAlive","Number","getNumberOfAliveAround","num","length","getNextGeneration","result","slice","nextState","state","neighbors","step","Array","from","map","fill","fieldEl","intervalId","buttonEl","makeGameStep","setInterval","clearInterval","createGameOfLife","querySelector"],"sourceRoot":""}