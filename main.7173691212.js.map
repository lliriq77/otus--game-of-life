{"version":3,"file":"main.7173691212.js","mappings":"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","sources":["webpack://otus--game-of-life/./src/utils/getNumberOfAliveAround.ts","webpack://otus--game-of-life/./src/utils/drawField.ts","webpack://otus--game-of-life/./src/utils/getNextGeneration.ts","webpack://otus--game-of-life/./src/utils/getNextCellState.ts","webpack://otus--game-of-life/./src/createGameOfLife.ts","webpack://otus--game-of-life/./src/index.ts"],"sourcesContent":["export function getNumberOfAliveAround(\n  field: number[][],\n  x: number,\n  y: number\n) {\n  /**\n   * x - 1, y - 1\n   * x , y - 1\n   * x + 1, y - 1\n   * x - 1, y\n   * x + 1, y\n   * x - 1, y + 1\n   * x, y + 1\n   * x + 1, y + 1\n   */\n  let num = 0;\n  if (y - 1 >= 0 && y - 1 < field.length) {\n    num += field[y - 1][x - 1] || 0;\n    num += field[y - 1][x] || 0;\n    num += field[y - 1][x + 1] || 0;\n  }\n  if (y >= 0 && y < field.length) {\n    num += field[y][x - 1] || 0;\n    num += field[y][x + 1] || 0;\n  }\n  if (y + 1 >= 0 && y + 1 < field.length) {\n    num += field[y + 1][x - 1] || 0;\n    num += field[y + 1][x] || 0;\n    num += field[y + 1][x + 1] || 0;\n  }\n  return num;\n}\n","import { getNumberOfAliveAround } from \"./getNumberOfAliveAround\";\n\nexport function drawField(\n  el: HTMLElement,\n  field: number[][],\n  onCellClick: (a: number, b: number, c: boolean) => void\n): void {\n  el.innerHTML = \"\";\n\n  const table: HTMLTableElement = document.createElement(\"table\");\n\n  field.forEach((row, y) => {\n    const tr: HTMLTableRowElement = document.createElement(\"tr\");\n\n    row.forEach((cell, x) => {\n      const td: HTMLTableCellElement = document.createElement(\"td\");\n\n      td.classList.add(\"cell\");\n      td.classList.add(\n        cell === 0\n          ? \"cell--dead\"\n          : getNumberOfAliveAround(field, x, y) === 2 ||\n            getNumberOfAliveAround(field, x, y) === 3\n          ? \"cell--alive\"\n          : \"cell--dying\"\n      );\n      td.dataset.x = `${x}`;\n      td.dataset.y = `${y}`;\n      tr.append(td);\n    });\n    table.append(tr);\n  });\n\n  table.addEventListener(\"click\", (evt) => {\n    const element = <HTMLElement>evt.target;\n\n    if (element.classList.contains(\"cell\")) {\n      const isAlive: boolean =\n        element.classList.contains(\"cell--alive\") ||\n        element.classList.contains(\"cell--dying\");\n\n      onCellClick(\n        Number(element.dataset.x),\n        Number(element.dataset.y),\n        isAlive\n      );\n    }\n  });\n  el.append(table);\n}\n","import { getNumberOfAliveAround } from \"./getNumberOfAliveAround\";\nimport { getNextCellState } from \"./getNextCellState\";\n\nexport function getNextGeneration(field: number[][]) {\n  const result: number[][] = field.slice(0);\n  for (let y = 0; y < field.length; y += 1) {\n    // result[y] === field[y]\n    result[y] = result[y].slice(0);\n\n    for (let x = 0; x < field[y].length; x += 1) {\n      const num: number = getNumberOfAliveAround(field, x, y);\n      const state: boolean = field[y][x] !== 0;\n      const nextState: boolean = getNextCellState(state, num);\n      result[y][x] = nextState ? 1 : 0;\n    }\n  }\n  return result;\n}\n","export function getNextCellState(state: boolean, neighbors: number): boolean {\n  if (state === false && neighbors === 3) {\n    return true;\n  }\n  // if (state === true && (neighbors === 2 || neighbors === 3)) {\n  //   return true;\n  // }\n  // return false;\n  return state === true && (neighbors === 2 || neighbors === 3);\n}\n","import { drawField } from \"./utils/drawField\";\nimport { getNextGeneration } from \"./utils/getNextGeneration\";\n\nlet WIDTH = 20;\nlet HEIGHT = 20;\nconst GAME_STEP_DELAY_IN_MS = 1000;\nlet field: number[][];\n\nexport function createGameOfLife(\n  el: HTMLElement,\n  step = GAME_STEP_DELAY_IN_MS\n): void {\n  field = Array.from({ length: HEIGHT }).map(\n    () => Array.from({ length: WIDTH }).fill(0) as number[]\n  );\n\n  const fieldEl: HTMLDivElement = document.createElement(\"div\");\n  fieldEl.classList.add(\"field\");\n  el.append(fieldEl);\n\n  const buttonEl: HTMLButtonElement = document.createElement(\"button\");\n  buttonEl.innerHTML = \"Start\";\n  el.append(buttonEl);\n\n  const buttonPlus: HTMLButtonElement = document.createElement(\"button\");\n  buttonPlus.innerHTML = \"+\";\n  el.append(buttonPlus);\n\n  const buttonMin: HTMLButtonElement = document.createElement(\"button\");\n  buttonMin.innerHTML = \"-\";\n  el.append(buttonMin);\n\n  let intervalId: any;\n  buttonEl.addEventListener(\"click\", () => {\n    if (buttonEl.innerHTML === \"Start\") {\n      buttonEl.innerHTML = \"Stop\";\n      intervalId = setInterval(makeGameStep, step);\n    } else {\n      buttonEl.innerHTML = \"Start\";\n      clearInterval(intervalId);\n    }\n  });\n\n  buttonPlus.addEventListener(\"click\", () => {\n    WIDTH += 1;\n    HEIGHT += 1;\n    const newField = Array.from({ length: HEIGHT }).map(\n      () => Array.from({ length: WIDTH }).fill(0) as number[]\n    );\n    field = getNextGeneration(field);\n\n    for (let y = 0; y < newField.length - 1; y += 1) {\n      for (let x = 0; x < newField[y].length - 1; x += 1) {\n        newField[y][x] = field[y][x];\n      }\n    }\n    drawField(fieldEl, newField, onCellClick);\n    field = newField;\n  });\n\n  buttonMin.addEventListener(\"click\", () => {\n    WIDTH -= 1;\n    HEIGHT -= 1;\n    const newField = Array.from({ length: HEIGHT }).map(\n      () => Array.from({ length: WIDTH }).fill(0) as number[]\n    );\n    field = getNextGeneration(field);\n\n    for (let y = 0; y < newField.length; y += 1) {\n      for (let x = 0; x < newField[y].length; x += 1) {\n        newField[y][x] = field[y][x];\n      }\n    }\n    drawField(fieldEl, newField, onCellClick);\n    field = newField;\n  });\n\n  function makeGameStep(): void {\n    field = getNextGeneration(field);\n    drawField(fieldEl, field, onCellClick);\n  }\n\n  const onCellClick: (a: number, b: number) => void = (x, y) => {\n    field[y][x] = field[y][x] ? 0 : 1;\n    drawField(fieldEl, field, onCellClick);\n  };\n\n  drawField(fieldEl, field, onCellClick);\n}\n","import \"./styles.css\";\nimport { createGameOfLife } from \"./createGameOfLife\";\n\ncreateGameOfLife(document.querySelector(\"#app\") as HTMLElement);\n// - правила с логикой\n// - интерфейс\n// - интерфейс поля\n// - обработчики событий (менять состояние клетки при нажатии)\n// - автоматический пересчет состояний\n// /**\n//  *    0 1 0 0 1 0 1\n//  *    0 1 0 0 1 0 0\n//  *    0 1 0 0 1 1 1\n//  */\n\n//  // y - 0, 1, 2\n//  // x - 0-6\n//  // (x, y)\n//  // (1, 2) -> 1\n//  // (5, 1) -> 0\n//  // (5, 2) -> 1\n//  // (6, 0) -> 1\n// const field = [\n//   [0, 1, 0, 0, 1, 0, 1],\n//   [0, 1, 0, 0, 1, 0, 0],\n//   [0, 1, 0, 0, 1, 1, 1]\n// ];\n\n// const x = 4;\n// const y = 1;\n// field[y][x]\n"],"names":["getNumberOfAliveAround","field","x","y","num","length","drawField","el","onCellClick","innerHTML","table","document","createElement","forEach","row","tr","cell","td","classList","add","dataset","append","addEventListener","evt","element","target","contains","isAlive","Number","getNextGeneration","result","slice","nextState","state","neighbors","WIDTH","HEIGHT","step","Array","from","map","fill","fieldEl","buttonEl","buttonPlus","intervalId","buttonMin","makeGameStep","setInterval","clearInterval","newField","createGameOfLife","querySelector"],"sourceRoot":""}